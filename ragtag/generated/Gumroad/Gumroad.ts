// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class Bought extends ethereum.Event {
  get params(): Bought__Params {
    return new Bought__Params(this);
  }
}

export class Bought__Params {
  _event: Bought;

  constructor(event: Bought) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get buyer(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get tokenURI(): string {
    return this._event.parameters[3].value.toString();
  }

  get creator(): Address {
    return this._event.parameters[4].value.toAddress();
  }
}

export class Created extends ethereum.Event {
  get params(): Created__Params {
    return new Created__Params(this);
  }
}

export class Created__Params {
  _event: Created;

  constructor(event: Created) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get creator(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get tokenAddress(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get price(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get supply(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get tokenURI(): string {
    return this._event.parameters[6].value.toString();
  }

  get rentable(): boolean {
    return this._event.parameters[7].value.toBoolean();
  }

  get rentPrice(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }
}

export class Rent extends ethereum.Event {
  get params(): Rent__Params {
    return new Rent__Params(this);
  }
}

export class Rent__Params {
  _event: Rent;

  constructor(event: Rent) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get renter(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get tokenURI(): string {
    return this._event.parameters[4].value.toString();
  }

  get rentPrice(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get rentTime(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class Resell extends ethereum.Event {
  get params(): Resell__Params {
    return new Resell__Params(this);
  }
}

export class Resell__Params {
  _event: Resell;

  constructor(event: Resell) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get seller(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get tokenURI(): string {
    return this._event.parameters[4].value.toString();
  }

  get creator(): Address {
    return this._event.parameters[5].value.toAddress();
  }

  get resell(): boolean {
    return this._event.parameters[6].value.toBoolean();
  }
}

export class TransferBatch extends ethereum.Event {
  get params(): TransferBatch__Params {
    return new TransferBatch__Params(this);
  }
}

export class TransferBatch__Params {
  _event: TransferBatch;

  constructor(event: TransferBatch) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }

  get values(): Array<BigInt> {
    return this._event.parameters[4].value.toBigIntArray();
  }
}

export class TransferSingle extends ethereum.Event {
  get params(): TransferSingle__Params {
    return new TransferSingle__Params(this);
  }
}

export class TransferSingle__Params {
  _event: TransferSingle;

  constructor(event: TransferSingle) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get value(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class URI extends ethereum.Event {
  get params(): URI__Params {
    return new URI__Params(this);
  }
}

export class URI__Params {
  _event: URI;

  constructor(event: URI) {
    this._event = event;
  }

  get value(): string {
    return this._event.parameters[0].value.toString();
  }

  get id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Gumroad__tokenInfoResult {
  value0: Address;
  value1: Address;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: boolean;
  value6: boolean;

  constructor(
    value0: Address,
    value1: Address,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: boolean,
    value6: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromBoolean(this.value5));
    map.set("value6", ethereum.Value.fromBoolean(this.value6));
    return map;
  }

  getCreatorAddress(): Address {
    return this.value0;
  }

  getTokenAddress(): Address {
    return this.value1;
  }

  getSupply(): BigInt {
    return this.value2;
  }

  getPrice(): BigInt {
    return this.value3;
  }

  getRentPrice(): BigInt {
    return this.value4;
  }

  getMatic(): boolean {
    return this.value5;
  }

  getRentable(): boolean {
    return this.value6;
  }
}

export class Gumroad extends ethereum.SmartContract {
  static bind(address: Address): Gumroad {
    return new Gumroad("Gumroad", address);
  }

  balanceOf(account: Address, id: BigInt): BigInt {
    let result = super.call(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address, id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfBatch(accounts: Array<Address>, ids: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(accounts),
        ethereum.Value.fromUnsignedBigIntArray(ids)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_balanceOfBatch(
    accounts: Array<Address>,
    ids: Array<BigInt>
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(accounts),
        ethereum.Value.fromUnsignedBigIntArray(ids)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getContentURI(_tokenId: BigInt): string {
    let result = super.call(
      "getContentURI",
      "getContentURI(uint256):(string)",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)]
    );

    return result[0].toString();
  }

  try_getContentURI(_tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall(
      "getContentURI",
      "getContentURI(uint256):(string)",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  isApprovedForAll(account: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(operator)
      ]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    account: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(operator)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  resellors(param0: BigInt): Address {
    let result = super.call("resellors", "resellors(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_resellors(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("resellors", "resellors(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  tokenId(): BigInt {
    let result = super.call("tokenId", "tokenId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_tokenId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("tokenId", "tokenId():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenInfo(param0: BigInt): Gumroad__tokenInfoResult {
    let result = super.call(
      "tokenInfo",
      "tokenInfo(uint256):(address,address,uint256,uint256,uint256,bool,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Gumroad__tokenInfoResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBoolean(),
      result[6].toBoolean()
    );
  }

  try_tokenInfo(param0: BigInt): ethereum.CallResult<Gumroad__tokenInfoResult> {
    let result = super.tryCall(
      "tokenInfo",
      "tokenInfo(uint256):(address,address,uint256,uint256,uint256,bool,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Gumroad__tokenInfoResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBoolean(),
        value[6].toBoolean()
      )
    );
  }

  tokenURIs(param0: BigInt): string {
    let result = super.call("tokenURIs", "tokenURIs(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toString();
  }

  try_tokenURIs(param0: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURIs", "tokenURIs(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  uri(_tokenId: BigInt): string {
    let result = super.call("uri", "uri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);

    return result[0].toString();
  }

  try_uri(_tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("uri", "uri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _worldId(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class BuyItemCall extends ethereum.Call {
  get inputs(): BuyItemCall__Inputs {
    return new BuyItemCall__Inputs(this);
  }

  get outputs(): BuyItemCall__Outputs {
    return new BuyItemCall__Outputs(this);
  }
}

export class BuyItemCall__Inputs {
  _call: BuyItemCall;

  constructor(call: BuyItemCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _address(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get root(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get nullifierHash(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get proof(): Array<BigInt> {
    return this._call.inputValues[4].value.toBigIntArray();
  }
}

export class BuyItemCall__Outputs {
  _call: BuyItemCall;

  constructor(call: BuyItemCall) {
    this._call = call;
  }
}

export class BuyResellItemCall extends ethereum.Call {
  get inputs(): BuyResellItemCall__Inputs {
    return new BuyResellItemCall__Inputs(this);
  }

  get outputs(): BuyResellItemCall__Outputs {
    return new BuyResellItemCall__Outputs(this);
  }
}

export class BuyResellItemCall__Inputs {
  _call: BuyResellItemCall;

  constructor(call: BuyResellItemCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BuyResellItemCall__Outputs {
  _call: BuyResellItemCall;

  constructor(call: BuyResellItemCall) {
    this._call = call;
  }
}

export class CreateItemCall extends ethereum.Call {
  get inputs(): CreateItemCall__Inputs {
    return new CreateItemCall__Inputs(this);
  }

  get outputs(): CreateItemCall__Outputs {
    return new CreateItemCall__Outputs(this);
  }
}

export class CreateItemCall__Inputs {
  _call: CreateItemCall;

  constructor(call: CreateItemCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get price(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get tokenAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _tokenURI(): string {
    return this._call.inputValues[3].value.toString();
  }

  get _contentURI(): string {
    return this._call.inputValues[4].value.toString();
  }

  get matic(): boolean {
    return this._call.inputValues[5].value.toBoolean();
  }

  get rentable(): boolean {
    return this._call.inputValues[6].value.toBoolean();
  }

  get rent_price(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }
}

export class CreateItemCall__Outputs {
  _call: CreateItemCall;

  constructor(call: CreateItemCall) {
    this._call = call;
  }
}

export class RentItemCall extends ethereum.Call {
  get inputs(): RentItemCall__Inputs {
    return new RentItemCall__Inputs(this);
  }

  get outputs(): RentItemCall__Outputs {
    return new RentItemCall__Outputs(this);
  }
}

export class RentItemCall__Inputs {
  _call: RentItemCall;

  constructor(call: RentItemCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get rentTime(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RentItemCall__Outputs {
  _call: RentItemCall;

  constructor(call: RentItemCall) {
    this._call = call;
  }
}

export class ResellItemCall extends ethereum.Call {
  get inputs(): ResellItemCall__Inputs {
    return new ResellItemCall__Inputs(this);
  }

  get outputs(): ResellItemCall__Outputs {
    return new ResellItemCall__Outputs(this);
  }
}

export class ResellItemCall__Inputs {
  _call: ResellItemCall;

  constructor(call: ResellItemCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ResellItemCall__Outputs {
  _call: ResellItemCall;

  constructor(call: ResellItemCall) {
    this._call = call;
  }
}

export class SafeBatchTransferFromCall extends ethereum.Call {
  get inputs(): SafeBatchTransferFromCall__Inputs {
    return new SafeBatchTransferFromCall__Inputs(this);
  }

  get outputs(): SafeBatchTransferFromCall__Outputs {
    return new SafeBatchTransferFromCall__Outputs(this);
  }
}

export class SafeBatchTransferFromCall__Inputs {
  _call: SafeBatchTransferFromCall;

  constructor(call: SafeBatchTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SafeBatchTransferFromCall__Outputs {
  _call: SafeBatchTransferFromCall;

  constructor(call: SafeBatchTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class UpdateContentURICall extends ethereum.Call {
  get inputs(): UpdateContentURICall__Inputs {
    return new UpdateContentURICall__Inputs(this);
  }

  get outputs(): UpdateContentURICall__Outputs {
    return new UpdateContentURICall__Outputs(this);
  }
}

export class UpdateContentURICall__Inputs {
  _call: UpdateContentURICall;

  constructor(call: UpdateContentURICall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _contentURI(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class UpdateContentURICall__Outputs {
  _call: UpdateContentURICall;

  constructor(call: UpdateContentURICall) {
    this._call = call;
  }
}

export class UpdateSupplyCall extends ethereum.Call {
  get inputs(): UpdateSupplyCall__Inputs {
    return new UpdateSupplyCall__Inputs(this);
  }

  get outputs(): UpdateSupplyCall__Outputs {
    return new UpdateSupplyCall__Outputs(this);
  }
}

export class UpdateSupplyCall__Inputs {
  _call: UpdateSupplyCall;

  constructor(call: UpdateSupplyCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UpdateSupplyCall__Outputs {
  _call: UpdateSupplyCall;

  constructor(call: UpdateSupplyCall) {
    this._call = call;
  }
}

export class UpdateTokenURICall extends ethereum.Call {
  get inputs(): UpdateTokenURICall__Inputs {
    return new UpdateTokenURICall__Inputs(this);
  }

  get outputs(): UpdateTokenURICall__Outputs {
    return new UpdateTokenURICall__Outputs(this);
  }
}

export class UpdateTokenURICall__Inputs {
  _call: UpdateTokenURICall;

  constructor(call: UpdateTokenURICall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _tokenURI(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class UpdateTokenURICall__Outputs {
  _call: UpdateTokenURICall;

  constructor(call: UpdateTokenURICall) {
    this._call = call;
  }
}
